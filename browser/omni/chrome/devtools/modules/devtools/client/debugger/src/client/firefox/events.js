"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setupEvents = setupEvents;
exports.addThreadEventListeners = addThreadEventListeners;
exports.clientEvents = void 0;
loader.lazyRequireGetter(this, "_create", "devtools/client/debugger/src/client/firefox/create");

var _sourceQueue = _interopRequireDefault(require("../../utils/source-queue"));

loader.lazyRequireGetter(this, "_telemetry", "devtools/client/debugger/src/utils/telemetry");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at <http://mozilla.org/MPL/2.0/>. */
const CALL_STACK_PAGE_SIZE = 1000;
let actions;
let isInterrupted;

function addThreadEventListeners(thread) {
  Object.keys(clientEvents).forEach(eventName => {
    thread.on(eventName, clientEvents[eventName].bind(null, thread));
  });
}

function setupEvents(dependencies) {
  const threadFront = dependencies.threadFront;
  const tabTarget = dependencies.tabTarget;
  actions = dependencies.actions;

  _sourceQueue.default.initialize(actions);

  addThreadEventListeners(threadFront);
  tabTarget.on("workerListChanged", () => threadListChanged("worker"));
  tabTarget.on("processListChanged", () => threadListChanged("contentProcess"));
}

async function paused(threadFront, packet) {
  // If paused by an explicit interrupt, which are generated by the
  // slow script dialog and internal events such as setting
  // breakpoints, ignore the event.
  const {
    why
  } = packet;

  if (why.type === "interrupted" && !packet.why.onNext) {
    isInterrupted = true;
    return;
  }

  let response;

  try {
    // Eagerly fetch the frames
    response = await threadFront.getFrames(0, CALL_STACK_PAGE_SIZE);
  } catch (e) {
    console.log(e);
    return;
  } // NOTE: this happens if we fetch frames and then immediately navigate


  if (!response.hasOwnProperty("frames")) {
    return;
  }

  if (why.type != "alreadyPaused") {
    const pause = (0, _create.createPause)(threadFront.actor, packet, response);
    await _sourceQueue.default.flush();
    actions.paused(pause);
  }

  (0, _telemetry.recordEvent)("pause", {
    reason: why.type
  });
}

function resumed(threadFront) {
  // NOTE: the client suppresses resumed events while interrupted
  // to prevent unintentional behavior.
  // see [client docs](../README.md#interrupted) for more information.
  if (isInterrupted) {
    isInterrupted = false;
    return;
  }

  actions.resumed(threadFront.actorID);
}

function newSource(threadFront, {
  source
}) {
  _sourceQueue.default.queue({
    type: "generated",
    data: (0, _create.prepareSourcePayload)(threadFront, source)
  });
}

function threadListChanged(type) {
  actions.updateThreads(type);
}

const clientEvents = {
  paused,
  resumed,
  newSource
};
exports.clientEvents = clientEvents;